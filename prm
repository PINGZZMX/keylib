local function InitializeUI(genv, callback)
    local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
    local MainFrame = Instance.new("Frame")
    local TopBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local StatusContainer = Instance.new("Frame")
    local AlertBox = Instance.new("TextLabel")
    local InputContainer = Instance.new("Frame")
    local TextBox = Instance.new("TextBox")
    local ButtonsContainer = Instance.new("Frame")
    local SubmitButton = Instance.new("TextButton")
    local CopyButton = Instance.new("TextButton")
    local Footer = Instance.new("TextLabel")
    local RememberKeyContainer = Instance.new("Frame")
    local RememberKeyCheckbox = Instance.new("Frame")
    local RememberKeyInner = Instance.new("Frame")
    local RememberKeyLabel = Instance.new("TextLabel")
    local rememberKey = true

    local hwid = game:GetService("RbxAnalyticsService"):GetClientId()

    local function exitAnimationAndDestroy()
        if genv.UIAnimation then
            local RunService = game:GetService("RunService")
            local currentPosition = MainFrame.Position
            local targetY = -0.5
            local duration = 0.7
            local startTime = tick()
            local easeInQuad = function(t) return t * t end

            for _, descendant in pairs(ScreenGui:GetDescendants()) do
                if descendant:IsA("TextButton") or descendant:IsA("TextBox") then
                    descendant.Active = false
                end
            end

            local animationConnection
            animationConnection = RunService.RenderStepped:Connect(function()
                if not MainFrame or not MainFrame.Parent then
                    if animationConnection then animationConnection:Disconnect() end
                    return
                end

                local elapsed = tick() - startTime
                local progress = math.min(elapsed / duration, 1)
                local easedProgress = easeInQuad(progress)

                local newY = currentPosition.Y.Scale + (targetY - currentPosition.Y.Scale) * easedProgress

                MainFrame.Position = UDim2.new(currentPosition.X.Scale, currentPosition.X.Offset, newY, currentPosition.Y.Offset)

                local wobble = math.sin(progress * math.pi * 4) * (1 - progress) * 2
                MainFrame.Rotation = wobble

                if progress >= 1 then
                    if animationConnection then animationConnection:Disconnect() end
                    ScreenGui:Destroy()
                end
            end)
        else
            ScreenGui:Destroy()
        end
    end

    local function CreateUICorner(instance, radius)
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, radius or 8)
        corner.Parent = instance
        return corner
    end

    local function CreateUIStroke(instance, color, thickness)
        local stroke = Instance.new("UIStroke")
        stroke.Color = color or Color3.fromRGB(255, 255, 255)
        stroke.Transparency = 0.7
        stroke.Thickness = thickness or 1
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        stroke.Parent = instance
        return stroke
    end

    ScreenGui.Name = "REVOLT_GUI"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.DisplayOrder = 999
    ScreenGui.ResetOnSpawn = false

    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 420, 0, 360)
    MainFrame.Position = UDim2.new(0.5, -210, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui

    local UICornerMainFrame = Instance.new("UICorner")
    UICornerMainFrame.Parent = MainFrame
    UICornerMainFrame.CornerRadius = UDim.new(0, 10)

    local function lerp(a, b, t)
        return a + (b - a) * t
    end

    local function rainbowColor(time)
        local r = math.sin(time + 0) * 0.5 + 0.5
        local g = math.sin(time + (2 * math.pi / 3)) * 0.5 + 0.5
        local b = math.sin(time + (4 * math.pi / 3)) * 0.5 + 0.5
        return Color3.new(r, g, b)
    end

    local function pulsateStrokeThickness(uiStroke, minThickness, maxThickness, speed)
        while true do
            for t = 0, 1, speed do
                local thickness = lerp(minThickness, maxThickness, math.sin(t * math.pi))
                uiStroke.Thickness = thickness
                wait()
            end
        end
    end

    local uiStroke = CreateUIStroke(MainFrame, Color3.fromRGB(100, 100, 255), 2)

    spawn(function()
        while true do
            local time = tick()
            uiStroke.Color = rainbowColor(time)
            wait(0.1)
        end
    end)

    spawn(function()
        pulsateStrokeThickness(uiStroke, 6, 20, 0.03)
    end)

    local gradient = Instance.new("UIGradient")
    gradient.Rotation = 45
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 50)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(30, 30, 45)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 35))
    })
    gradient.Parent = MainFrame

    spawn(function()
        local counter = 0
        while wait(0.05) do
            if not MainFrame or not MainFrame.Parent then break end
            counter = counter + 0.005
            gradient.Rotation = 45 + math.sin(counter) * 15
        end
    end)

    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 50)
    TopBar.Position = UDim2.new(0, 0, 0, 0)
    TopBar.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    TopBar.BackgroundTransparency = 0.3
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    CreateUICorner(TopBar, 12)

    if genv.draggingmode == 1 then
        local dragging = false
        local dragStart = nil
        local startPos = nil

        TopBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = MainFrame.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                local delta = input.Position - dragStart
                MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    elseif genv.draggingmode == 2 then
        local UserInputService = game:GetService("UserInputService")
        local RunService = game:GetService("RunService")

        local dragging = false
        local dragStart = nil
        local startPos = nil
        local dragInput = nil
        local targetPosition = nil

        local smoothness = 0.10

        TopBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = MainFrame.Position

                local inputConnection
                inputConnection = input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        inputConnection:Disconnect()
                    end
                end)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)

        RunService.RenderStepped:Connect(function()
            if dragging and dragInput then
                local delta = dragInput.Position - dragStart
                targetPosition = UDim2.new(
                    startPos.X.Scale, 
                    startPos.X.Offset + delta.X, 
                    startPos.Y.Scale, 
                    startPos.Y.Offset + delta.Y
                )
            end
            
            if targetPosition and MainFrame and MainFrame.Parent then
                MainFrame.Position = MainFrame.Position:Lerp(
                    targetPosition, 
                    smoothness
                )
            end
        end)
    end

    local topBarMask = Instance.new("Frame")
    topBarMask.Size = UDim2.new(1, 0, 0.5, 0)
    topBarMask.Position = UDim2.new(0, 0, 0.5, 0)
    topBarMask.BackgroundColor3 = TopBar.BackgroundColor3
    topBarMask.BackgroundTransparency = TopBar.BackgroundTransparency
    topBarMask.BorderSizePixel = 0
    topBarMask.Parent = TopBar

    Title.Name = "Title"
    Title.Size = UDim2.new(1, -60, 1, 0)
    Title.Position = UDim2.new(0, 20, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = ""
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 36
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar

    local titleShadow = Instance.new("TextLabel")
    titleShadow.Size = Title.Size
    titleShadow.Position = UDim2.new(0, 2, 0, 2)
    titleShadow.BackgroundTransparency = 1
    titleShadow.Text = Title.Text
    titleShadow.TextColor3 = Color3.fromRGB(100, 100, 255)
    titleShadow.Font = Title.Font
    titleShadow.TextSize = Title.TextSize
    titleShadow.TextXAlignment = Title.TextXAlignment
    titleShadow.TextTransparency = 0.8
    titleShadow.ZIndex = Title.ZIndex - 1
    titleShadow.Parent = Title

    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 36, 0, 36)
    CloseButton.Position = UDim2.new(1, -46, 0, 7)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    CloseButton.BackgroundTransparency = 0.2
    CloseButton.Text = "×"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextSize = 24
    CloseButton.Parent = TopBar
    CloseButton.AutoButtonColor = false
    CreateUICorner(CloseButton, 18)

    StatusContainer.Name = "StatusContainer"
    StatusContainer.Size = UDim2.new(1, -40, 0, 40)
    StatusContainer.Position = UDim2.new(0, 20, 0, 60)
    StatusContainer.BackgroundTransparency = 1
    StatusContainer.Parent = MainFrame

    AlertBox.Name = "AlertBox"
    AlertBox.Size = UDim2.new(1, 0, 1, 0)
    AlertBox.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    AlertBox.BackgroundTransparency = 0.25
    AlertBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    AlertBox.Font = Enum.Font.GothamSemibold
    AlertBox.TextSize = 18
    AlertBox.Text = ""
    AlertBox.Visible = false
    AlertBox.Parent = StatusContainer
    CreateUICorner(AlertBox, 8)

    InputContainer.Name = "InputContainer"
    InputContainer.Size = UDim2.new(1, -40, 0, 60)
    InputContainer.Position = UDim2.new(0, 20, 0, 110)
    InputContainer.BackgroundTransparency = 1
    InputContainer.Parent = MainFrame

    TextBox.Name = "KeyInput"
    TextBox.Size = UDim2.new(1, 0, 1, 0)
    TextBox.Text = ""
    TextBox.PlaceholderText = "Enter key..."
    TextBox.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    TextBox.BackgroundTransparency = 0.2
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 200)
    TextBox.Font = Enum.Font.Gotham
    TextBox.TextSize = 18
    TextBox.Parent = InputContainer
    TextBox.ClearTextOnFocus = false
    TextBox.TextWrapped = true
    CreateUICorner(TextBox, 8)
    CreateUIStroke(TextBox, Color3.fromRGB(100, 100, 255), 1.5)

    RememberKeyContainer.Name = "RememberKeyContainer"
    RememberKeyContainer.Size = UDim2.new(1, -40, 0, 30)
    RememberKeyContainer.Position = UDim2.new(0, 20, 0, 180)
    RememberKeyContainer.BackgroundTransparency = 1
    RememberKeyContainer.Parent = MainFrame

    RememberKeyCheckbox.Name = "RememberKeyCheckbox"
    RememberKeyCheckbox.Size = UDim2.new(0, 20, 0, 20)
    RememberKeyCheckbox.Position = UDim2.new(0, 0, 0, 5)
    RememberKeyCheckbox.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    RememberKeyCheckbox.BackgroundTransparency = 0.2
    RememberKeyCheckbox.Parent = RememberKeyContainer
    CreateUICorner(RememberKeyCheckbox, 4)
    CreateUIStroke(RememberKeyCheckbox, Color3.fromRGB(100, 100, 255), 1.5)

    RememberKeyInner.Name = "RememberKeyInner"
    RememberKeyInner.Size = UDim2.new(0.7, 0, 0.7, 0)
    RememberKeyInner.Position = UDim2.new(0.5, 0, 0.5, 0)
    RememberKeyInner.AnchorPoint = Vector2.new(0.5, 0.5)
    RememberKeyInner.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    RememberKeyInner.BackgroundTransparency = 0.2
    RememberKeyInner.Parent = RememberKeyCheckbox
    CreateUICorner(RememberKeyInner, 2)

    RememberKeyLabel.Name = "RememberKeyLabel"
    RememberKeyLabel.Size = UDim2.new(0, 200, 0, 20)
    RememberKeyLabel.Position = UDim2.new(0, 30, 0, 5)
    RememberKeyLabel.BackgroundTransparency = 1
    RememberKeyLabel.Text = "Remember Key"
    RememberKeyLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
    RememberKeyLabel.Font = Enum.Font.Gotham
    RememberKeyLabel.TextSize = 16
    RememberKeyLabel.TextXAlignment = Enum.TextXAlignment.Left
    RememberKeyLabel.Parent = RememberKeyContainer

    ButtonsContainer.Name = "ButtonsContainer"
    ButtonsContainer.Size = UDim2.new(1, -40, 0, 120)
    ButtonsContainer.Position = UDim2.new(0, 20, 0, 220)
    ButtonsContainer.BackgroundTransparency = 1
    ButtonsContainer.Parent = MainFrame

    SubmitButton.Name = "SubmitButton"
    SubmitButton.Size = UDim2.new(1, 0, 0, 50)
    SubmitButton.Position = UDim2.new(0, 0, 0, 0)
    SubmitButton.Text = "Submit Key"
    SubmitButton.BackgroundColor3 = Color3.fromRGB(70, 200, 120)
    SubmitButton.BackgroundTransparency = 0.2
    SubmitButton.Font = Enum.Font.GothamBold
    SubmitButton.TextSize = 20
    SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    SubmitButton.Parent = ButtonsContainer
    SubmitButton.AutoButtonColor = false
    CreateUICorner(SubmitButton, 8)

    CopyButton.Name = "CopyButton"
    CopyButton.Size = UDim2.new(1, 0, 0, 50)
    CopyButton.Position = UDim2.new(0, 0, 0, 60)
    CopyButton.Text = "Copy Keysystem URL"
    CopyButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    CopyButton.BackgroundTransparency = 0.2
    CopyButton.Font = Enum.Font.GothamBold
    CopyButton.TextSize = 20
    CopyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CopyButton.Parent = ButtonsContainer
    CopyButton.AutoButtonColor = false
    CreateUICorner(CopyButton, 8)

    Footer.Name = "Footer"
    Footer.Size = UDim2.new(1, -40, 0, 20)
    Footer.Position = UDim2.new(0, 20, 1, -25)
    Footer.BackgroundTransparency = 1
    Footer.Text = "Powered by REV<>OLT"
    Footer.TextColor3 = Color3.fromRGB(150, 150, 200)
    Footer.Font = Enum.Font.Gotham
    Footer.TextSize = 14
    Footer.Parent = MainFrame

    local function setupButtonEffects(button, defaultColor, hoverColor)
        button.MouseEnter:Connect(function() 
            button.BackgroundColor3 = hoverColor
            button.TextSize = button.TextSize + 2 
        end)

        button.MouseLeave:Connect(function() 
            button.BackgroundColor3 = defaultColor 
            button.TextSize = button.TextSize - 2 
        end)

        button.MouseButton1Down:Connect(function() 
            button.BackgroundTransparency = 0.5
            button.Size = UDim2.new(button.Size.X.Scale, button.Size.X.Offset * 0.95, button.Size.Y.Scale, button.Size.Y.Offset * 0.95)
        end)

        button.MouseButton1Up:Connect(function() 
            button.BackgroundTransparency = 0.2 
            button.Size = UDim2.new(button.Size.X.Scale, button.Size.X.Offset / 0.95, button.Size.Y.Scale, button.Size.Y.Offset / 0.95)
        end)
    end

    local function setupRememberKeyHoverAnimation()
        local defaultCheckboxScale = RememberKeyCheckbox.Size
        local defaultLabelColor = RememberKeyLabel.TextColor3
        local defaultLabelSize = RememberKeyLabel.TextSize
        local defaultStrokeColor = RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Color
        local defaultStrokeThickness = RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Thickness

        RememberKeyContainer.MouseEnter:Connect(function()
            RememberKeyCheckbox:TweenSize(
                UDim2.new(0, 24, 0, 24), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Quad, 
                0.2, 
                true
            )
            
            RememberKeyLabel.TextSize = defaultLabelSize + 2
            RememberKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            
            RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Thickness = defaultStrokeThickness + 1
            
            spawn(function()
                local startTime = tick()
                local pulseConnection

                pulseConnection = game:GetService("RunService").RenderStepped:Connect(function()
                    if not RememberKeyContainer or not RememberKeyContainer.Parent then
                        if pulseConnection then pulseConnection:Disconnect() end
                        return
                    end
                    
                    if not RememberKeyContainer.Parent:FindFirstChild("RememberKeyContainer") then
                        if pulseConnection then pulseConnection:Disconnect() end
                        return
                    end
                    
                    local elapsed = tick() - startTime
                    local pulse = math.sin(elapsed * 5) * 0.1 + 0.9
                    
                    if RememberKeyCheckbox:FindFirstChildOfClass("UIStroke") then
                        RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Color = rainbowColor(elapsed)
                    end
                end)
                
                RememberKeyContainer.MouseLeave:Connect(function()
                    if pulseConnection then pulseConnection:Disconnect() end
                end)
            end)
        end)
        
        RememberKeyContainer.MouseLeave:Connect(function()
            RememberKeyCheckbox:TweenSize(
                defaultCheckboxScale, 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Quad, 
                0.2, 
                true
            )
            
            RememberKeyLabel.TextSize = defaultLabelSize
            RememberKeyLabel.TextColor3 = defaultLabelColor
            
            RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Thickness = defaultStrokeThickness
            RememberKeyCheckbox:FindFirstChildOfClass("UIStroke").Color = defaultStrokeColor
        end)
    end

    local function toggleCheckbox()
        rememberKey = not rememberKey
        
        if rememberKey then
            RememberKeyInner:TweenSize(
                UDim2.new(0.7, 0, 0.7, 0), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Bounce, 
                0.3, 
                true
            )
            RememberKeyInner.Visible = true
        else
            RememberKeyInner:TweenSize(
                UDim2.new(0, 0, 0, 0), 
                Enum.EasingDirection.Out, 
                Enum.EasingStyle.Quad, 
                0.2, 
                true,
                function()
                    RememberKeyInner.Visible = false
                    RememberKeyInner.Size = UDim2.new(0.7, 0, 0.7, 0)
                end
            )
        end
    end

    RememberKeyCheckbox.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggleCheckbox()
        end
    end)

    RememberKeyLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggleCheckbox()
        end
    end)

    setupButtonEffects(SubmitButton, Color3.fromRGB(70, 200, 120), Color3.fromRGB(90, 220, 140))
    setupButtonEffects(CopyButton, Color3.fromRGB(100, 100, 255), Color3.fromRGB(120, 120, 255))
    setupButtonEffects(CloseButton, Color3.fromRGB(255, 70, 70), Color3.fromRGB(255, 90, 90))
    setupRememberKeyHoverAnimation()

    local function showAlert(message, isSuccess)
        AlertBox.Text = message
        AlertBox.BackgroundColor3 = isSuccess 
            and Color3.fromRGB(70, 200, 120) 
            or Color3.fromRGB(200, 70, 70)
        AlertBox.Visible = true
        AlertBox.TextTransparency = 0
        AlertBox.BackgroundTransparency = 0.25
        
        spawn(function()
            wait(3)
            for i = 0, 1, 0.1 do
                if not AlertBox or not AlertBox.Parent then break end
                AlertBox.TextTransparency = i
                AlertBox.BackgroundTransparency = 0.25 + (i * 0.75)
                wait(0.05)
            end
            if AlertBox and AlertBox.Parent then
                AlertBox.Visible = false
            end
        end)
    end

    if genv.UIAnimation then
        MainFrame.Position = UDim2.new(0.5, -210, -0.5, 0)
        MainFrame.Visible = true
        
        local RunService = game:GetService("RunService")
        local targetY = 0.5
        local startY = -0.5
        local duration = 0.7
        local startTime = tick()
        local easeOutQuad = function(t) return 1 - (1 - t) * (1 - t) end
        
        local animationConnection
        animationConnection = RunService.RenderStepped:Connect(function()
            if not MainFrame or not MainFrame.Parent then
                if animationConnection then animationConnection:Disconnect() end
                return
            end
            
            local elapsed = tick() - startTime
            local progress = math.min(elapsed / duration, 1)
            local easedProgress = easeOutQuad(progress)
            
            local currentY = startY + (targetY - startY) * easedProgress
            
            MainFrame.Position = UDim2.new(0.5, -210, currentY, -175)
            
            local wobble = math.sin(progress * math.pi * 4) * (1 - progress) * 2
            MainFrame.Rotation = wobble
            
            if progress >= 1 then
                MainFrame.Rotation = 0
                MainFrame.Position = UDim2.new(0.5, -210, 0.5, -175)
                if animationConnection then animationConnection:Disconnect() end
            end
        end)
    elseif genv.UIAnimation == false then
        MainFrame.Position = UDim2.new(0.5, -210, 0.5, -175)
        MainFrame.Visible = true
    end

    local function createGlowEffect(parent)
        local glow = Instance.new("ImageLabel")
        glow.Size = UDim2.new(1.5, 0, 1.5, 0)
        glow.Position = UDim2.new(0.5, 0, 0.5, 0)
        glow.AnchorPoint = Vector2.new(0.5, 0.5)
        glow.BackgroundTransparency = 1
        glow.Image = "rbxassetid://4996891970"
        glow.ImageColor3 = Color3.fromRGB(100, 100, 255)
        glow.ImageTransparency = 0.85
        glow.ZIndex = parent.ZIndex - 1
        glow.Parent = parent

        spawn(function()
            while glow and glow.Parent do
                wait(4)
            end
        end)
    end

    createGlowEffect(Title)

    local function isValidJSON(responseBody)
        local success, decoded = pcall(function()
            return game:GetService("HttpService"):JSONDecode(responseBody)
        end)
        return success, decoded
    end

    local function sendRequest(url, body)
        local request
        if syn and syn.request then
            request = syn.request
        elseif http and http.request then
            request = http.request
        elseif httprequest then
            request = httprequest
        else
            warn("No valid request method found.")
            return nil
        end
        
        local response
        local success, err = pcall(function()
            response = request({
                Url = url,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = game:GetService("HttpService"):JSONEncode(body)
            })
        end)
        
        if not success then
            warn("Request failed:", err)
            return nil
        end

        if response and response.Body then
            local success, decodedResponse = isValidJSON(response.Body)
            if success then
                return decodedResponse
            else
                warn("Invalid JSON in response")
                return nil
            end
        else
            warn("Invalid response or missing Body")
            return nil
        end
    end

    local function CreateKeyFile()
        local folderName = genv.FolderName
        local filePath = folderName .. "/" .. genv.FileName .. "." .. genv.FileExtension
        
        local success, err = pcall(function()
            if not isfolder(folderName) then
                makefolder(folderName)
            end
            
            if not isfile(filePath) then
                writefile(filePath, "")
            end
        end)

        if not success then
            warn("Failed to create folder or file: " .. err)
            return nil
        end

        return filePath
    end

    local keyFilePath = CreateKeyFile()

    local function loadKey()
        if keyFilePath then
            return readfile(keyFilePath)
        else
            error("Key file path is nil.")
        end
    end

    local function handleLoadedKey()
        local existingKey
        pcall(function() 
            existingKey = loadKey() 
        end)

        if existingKey and #existingKey > 0 then
            local response = sendRequest("https://revolt.kingluc.my.id/live/3-11", {
                H = hwid,
                I = genv.ServiceID,
                K = existingKey
            })

            if response.status == "VALID_KEY" and response.customFlag and string.upper(response.customFlag) == "PREMIUM" then
                showAlert("You have a existing Key!", true)
                task.wait(1)
                exitAnimationAndDestroy()
                callback()
            else
                writefile(keyFilePath, "")
            end
        else
            print("No valid key found or existing key is empty.")
        end
    end

    local function getServiceURL()
        local response = sendRequest("https://revolt.kingluc.my.id/live/7-12", {
            I = genv.ServiceID,
            H = hwid
        })

        if response.link then
            setclipboard(response.link)
            showAlert("URL copied to clipboard!", true)
            return response.link
        elseif response.error then
            local errorMessages = {
                MISSING_PARAMS = "Missing Parameters",
                NOT_FOUND_SERVICE = "Service Not Found"
            }
            showAlert(errorMessages[response.error] or "Invalid Key", false)
        end
    end

    CopyButton.MouseButton1Click:Connect(function()
        local url = getServiceURL()
    end)

    SubmitButton.MouseButton1Click:Connect(function()
        local cleanedKey = TextBox.Text:gsub("%s+", "")
        local response = sendRequest("https://revolt.kingluc.my.id/live/3-11", {
            H = hwid,
            I = genv.ServiceID,
            K = cleanedKey
        })

        if response.status == "VALID_KEY" and response.customFlag and string.upper(response.customFlag) == "PREMIUM" then
            if rememberKey then
                writefile(keyFilePath, cleanedKey)
                showAlert("Key Valid! Access Granted (Key Saved)", true)
            else
                showAlert("Key Valid! Access Granted", true)
            end
            task.wait(1)
            exitAnimationAndDestroy()
            callback()
        else
            local errorMessages = {
                MISSING_PARAMS = "Missing Parameters",
                INVALID_HWID = "Invalid HWID",
                NOT_FOUND_SERVICE = "Service Not Found",
                INVALID_KEY = "Invalid Key",
                REVOKED_KEY = "Key Revoked"
            }
            showAlert(errorMessages[response.error] or "Invalid Key", false)
        end
    end)

    CloseButton.MouseButton1Click:Connect(function()
        if genv.UIAnimation then
            exitAnimationAndDestroy()
        else
            ScreenGui:Destroy()
        end
    end)

    local function getRandomColor()
        local r = math.random(5, 10) / 10
        local g = math.random(5, 10) / 10
        local b = math.random(5, 10) / 10
        return Color3.new(r, g, b)
    end

    local function typeWriterEffect(textLabel, text, delay)
        while true do
            for i = 1, #text do
                textLabel.Text = string.sub(text, 1, i)
                textLabel.TextColor3 = uiStroke.Color
                wait(delay)
            end
            
            wait(1)

            for i = #text, 1, -1 do
                textLabel.Text = string.sub(text, 1, i - 1)
                textLabel.TextColor3 = uiStroke.Color
                wait(delay)
            end
            
            wait(0)
        end
    end

    local uiStroke = CreateUIStroke(MainFrame, Color3.fromRGB(100, 100, 255), 2)

    spawn(function()
        while true do
            local time = tick()
            uiStroke.Color = rainbowColor(time)
            wait(0.1)
        end
    end)

    spawn(function()
        pulsateStrokeThickness(uiStroke, 2, 6, 0.1)
    end)

    spawn(function()
        wait(0.7)
        typeWriterEffect(Title, genv.ServiceNAME .. " Key-System", 0.09)
    end)

    spawn(function()
        while RememberKeyInner and RememberKeyInner.Parent do
            local time = tick()
            local color = rainbowColor(time)
            RememberKeyInner.BackgroundColor3 = color
            wait(0.1)
        end
    end)

    handleLoadedKey()
end

return { InitializeUI = InitializeUI }
